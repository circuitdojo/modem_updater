name: Build and Release Binaries

on:
  push:
    tags:
      - "v*"
      - "*.*.*"
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            binary_path: target/release/updater
            artifact_name: updater-linux
          - os: macos-latest
            binary_path: target/release/updater
            artifact_name: updater-macos
          - os: windows-latest
            binary_path: target/release/updater.exe
            artifact_name: updater-windows.exe

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev libusb-1.0-0-dev pkg-config

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: cargo build --release --bin updater

      - name: Collect artifact
        shell: bash
        run: |
          mkdir -p artifacts
          cp "${{ matrix.binary_path }}" artifacts/${{ matrix.artifact_name }}
          ls -la artifacts

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: modem-updater-${{ matrix.os }}
          path: artifacts/*
          if-no-files-found: error

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modem-updater-ubuntu-latest/updater-linux
          asset_name: modem-updater-${{ github.ref_name }}-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modem-updater-macos-latest/updater-macos
          asset_name: modem-updater-${{ github.ref_name }}-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modem-updater-windows-latest/updater-windows.exe
          asset_name: modem-updater-${{ github.ref_name }}-windows.exe
          asset_content_type: application/octet-stream
